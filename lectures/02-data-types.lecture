= Днес

* Скаларни типове
* Съставни типове: списъци, вектори, речници и техните абстракции

= Числа
Числата са скучни и знаете почти всичко. Почти.

:annotate
  10/4 ; =>

  (+ 2 111/222) ; =>

  (ratio? 1/2); =>

* Рационалните числа са много по-точни
* Рационалните числа са малко по-бавни

= keywords

:annotate
  (def users [{:name "Spinderman", :popularity 88} {:name "Baba" :popularity -3}])

  (map :name users) ; =>

* Ключове на речници
* Специални стойности за аргументи на функции

= regex

* `#"\d\d\d\w+"`
* <a href="http://clojuredocs.org/clojure_core/clojure.core/re-seq">(doc re-seq)</a>

= Abstractions

<blockquote>It is better to have 100 functions operate on one data abstraction than 10 functions on 10 data structures.
</blockquote>
Rick Hickey

* Различните абстракции за колекции в Clojure използват един и същи интерфейс, който не се влияе от имплементацията: `seq`, `conj`, `first`, `rest`, `count`…
* Всички структури, за които ще говорим днес са immutable и persistent – веднъж насочим ли едно име към стойност, тя никога не се променя. При това без да губим скорост или памет.
* Колекции – `conj`, `seq`, `empty`, `count`, `=`
* Поредици (sequences) – `seq`, `first`, `rest`, `lazy-seq`
* Асоциативни – `assoc`, `dissoc`, `get`, `contains?`
* Индесирани – `get`, `nth`
* Сортирани
* Стек, опашка – `conj`, `pop`, `peek`

= Вектори
= Списъци
= Речници
