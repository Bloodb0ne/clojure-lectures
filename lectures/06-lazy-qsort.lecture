= От миналия път

* Ако кодът ви в странен, замислете се за структурата си от данни
* Функционалният подход често ни влече към по-различни структури от процедурния
* `reduce` е удобен за операции върху поредици

= Преди qsort, малко мързеливи неща
== realized?

:annotate
  (def all-numbers (range))
  (def first-10-numbers (range 10))

  (realized? all-numbers)           ; =>

  (vec first-10-numbers)            ; =>

  (realized? first-10-numbers)      ; =>

= delay & force
== delay

Имате две операции: четене на домашно и решаване на домашно, но искаме да решим домашното (което отнема много време). Искаме да се захванем с решаване на домашното само ако след като го прочетем ни се стори ОК.

Но искаме и да имаме по-абстрактно решение.

:code
  (defn choose-wisely
    [condition slow-consequence]
    (if (force condition)
      (force slow-consequence)
      false))

  (choose-wisely (delay :looks-good)
                 (delay (do (Thread/sleep (* 5 24 60 60 1000)) :i-did-it!)))
  ; :i-did-it!

  (choose-wisely (delay false)
                 (delay (do (Thread/sleep (* 5 24 60 60 1000)) :i-did-it!)))
  ; false

= delay & force
== алтернатива

Можем да реализираме същото и с функции.

:code
  (defn choose-wisely
    [condition slow-consequence]
    (if (condition)
      (slow-consequence)
      false))

  (choose-wisely (constantly :looks-good)
                 #(do (Thread/sleep (* 5 24 60 60 1000)) :i-did-it!))

= delay & force
== leaky алтернатива

Можем да реализираме същото и с функции, но няма да може да проверяваме дали обект е създаден с `delay` с `delay?`.

В нашия пример няма нужда да delay-ваме условието.

:code
  (defn choose-wisely
    [condition slow-consequence]
    (if (if (delay? condition) (force condition) condition)
      (force slow-consequence)
      false))

  (choose-wisely :looks-good
                 (delay (do (Thread/sleep (* 5 24 60 60 1000)) :i-did-it!)))

= qsort
== бързо и лесно!

* Стар и красив алгоритъм
* `O(n×log₂(n))` в средния, `O(n²)` в най-лошия случай
* Все пак в повечето случаи е по-бърз от другите логаритмични
* Разделяй и владей
* На всяка стъпка избираме случаен елемент – пивот
* Намираме всички елементи, които са по-малки от него и ги сортираме със същия алгоритъм
* Намираме всички елементи, които са по-големи или равни от него и ги сортираме със същия алгоритъм
* *сортирани по-малки* пивот *сортитани по-големи*

= qsort
== имплементация

:annotate

  (defn qsort [xs]
    (if (seq xs)
      (let [pivot (first xs)
            smaller? #(< % pivot)
            xs (rest xs)]
        (concat
          (qsort (filter smaller? xs))
          [pivot]
          (qsort (remove smaller? xs))))
      xs))

  (qsort [7 9 -1 3 61 8]) ; =>

= qsort
== лог

:code
  (defn qsort [xs]
    (if (seq xs) (println "qsort" xs))
    (if (seq xs)
      (let [pivot (first xs)
            smaller? #(< % pivot)
            xs (rest xs)]
        (concat
          (qsort (filter smaller? xs))
          [pivot]
          (qsort (remove smaller? xs))))
      xs))

  (qsort [7 9 -1 3 61 8]) ; (-1 3 7 8 9 61)

= qsort
== лог

{{{
<pre>
qsort [7 9 -1 3 61 8]
pivot 7
qsort (-1 3)
pivot -1
qsort (3)
pivot 3
qsort (9 61 8)
pivot 9
qsort (8)
pivot 8
qsort (61)
pivot 61
</pre>
}}}

= qsort
== само първите 2

:code
  (take 2 (qsort [7 9 -1 3 61 8])) ; (-1 3 7 8 9 61)

{{{
<pre>
qsort [7 9 -1 3 61 8]
pivot 7
qsort (-1 3)
pivot -1
qsort (3)
pivot 3
qsort (9 61 8)
pivot 9
qsort (8)
pivot 8
qsort (61)
pivot 61
</pre>
}}}

= qsort
== lazy

* за да не смятаме всичко ни трябва итеративен алгоритъм
* ще представим цялата структура във вида: `(поредица) число (поредица) число … (поредица)`

= qsort
== lazy имплементация

:annotate

  (defn sort-parts [work]
    (lazy-seq
      (loop [[part & parts] work]
        (if-let [[pivot & xs] (seq part)]
          (letfn [(smaller? [x] (< x pivot))]
            (recur (list*
                     (filter smaller? xs)
                     pivot
                     (remove smaller? xs)
                     parts)))
          (when-let [[x & parts] parts]
            (cons x (sort-parts parts)))))))

  (defn lazy-qsort [xs]
    (sort-parts (list xs)))

  (lazy-qsort [7 9 -1 3 61 8]) ; =>


= qsort
== lazy имплементация

:code

  (defn sort-parts [work]
    (println "lazy" work)
    (lazy-seq
      (loop [[part & parts] work]
        (println "loop" part parts)
        (if-let [[pivot & xs] (seq part)]
          (letfn [(smaller? [x] (< x pivot))]
            (recur (list*
                     (filter smaller? xs)
                     pivot
                     (remove smaller? xs)
                     parts)))
          (when-let [[x & parts] parts]
            (cons x (sort-parts parts)))))))

  (defn lazy-qsort [xs]
    (sort-parts (list xs)))

  (lazy-qsort [7 9 -1 3 61 8]) ; [7 9 -1 3 61 8]



